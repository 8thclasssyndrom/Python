"""
День 4. Неделя 9. 16 декабря.
Тема: CRUD

CRUD(Create Read Update Delete ) 

CRUD был введен Мартином как стандитизированная классификация функций по управлению данными.

1. Реализация CRUD на FBV(Fuction-based view)
2. Реализация CRUD на CBV(Class-based view)


Function based view - FBV - представление основанное на функции




Добавление данных
create
Для добавления данных применяется метод create():

1
tom = Person.objects.create(name="Tom", age=23)
Если добавление пройдет успешно, то объект будет иметь id, который можно получить через tom.id.

save
Однако в своей сути метод create() использует другой метод - save(), который мы также можем использовать отдельно для добавления объекта:

1
2
tom = Person(name="Tom", age=23)
tom.save()
После успешного добавления также можно получить идентификатор добавленной записи с помощью tom.id.

Получение из бд
Получение одного объекта
Метод get() возвращает один объект по определенному условию, которое передается в качестве параметра:

1
2
3
tom = Person.objects.get(name="Tom")    # получаем запись, где name="Tom"
bob = Person.objects.get(age=23)        # получаем запись, где age=23
tim = Person.objects.get(name="Tim", age=23)    # запись, где name="Tim" и age=23
При использовании этого метода надо учитывать, что он предназначен для выборки таких объектов, которые имеются в единичном числе в базе данных. Если в таблице не окажется подобного объекта, то мы получим ошибку имя_модели.DoesNotExist. Если же в таблице будет несколько объектов, которые соответствуют условию, то будет сгенерированно исключение MultipleObjectsReturned. Поэтому следует применять данный метод с осторожностью.

Метод get_or_create() возвращает объект, а если его нет в бд, то добавляет в бд новый объект.

1
2
3
bob, created = Person.objects.get_or_create(name="Bob", age=24)
print(bob.name)
print(bob.age)
Метод возвращает добавленный объект (в данном случае переменная bob) и булевое значение (created), которое хранит True, если добавление прошло успешно.

all()
Если необходимо получить все имеющиеся объекты, то применяется метод all():

1
people = Person.objects.all()
filter()
Если надо получить все объекты, которые соответствуют определенному критерию, то применяется метод filter(), который в качестве параметра принимает критерий выборки:

1
2
3
people = Person.objects.filter(age=23)
# использование нескольких криетриев
people2 = Person.objects.filter(name="Tom", age=23)
exclude()
Метод exclude() позволяют исключить из выборки записи, которые соответвуют переданному в качестве параметра критерию:

1
2
# исключаем пользователей, у которых age=23
people = Person.objects.exclude(age=23)
Можно комбинировать два выше рассмотренных метода:

1
2
# выбираем всех пользователей, у которых name="Tom" кроме тех, у которых age=23
people = Person.objects.filter(name="Tom").exclude(age=23)
in_bulk()
Метод in_bulk() является более эффективным способом для чтения большого количества записей. Он возвращает словарь, то есть объект dict, тогда как методы all(), filter() и exclude() возвращают объект QuerySet:

1
2
3
4
5
6
7
8
9
10
11
# получаем все объекты
people = Person.objects.in_bulk()
for id in people:
    print(people[id].name)
    print(people[id].age)
 
# получаем объекты с id=1 и id=3
people2 = Person.objects.in_bulk([1,3])
for id in people2:
    print(people2[id].name)
    print(people2[id].age)
Метод in_bulk возвращает словарь, где ключи представляют id объектов, а значения по этим ключам - собственно эти объекты, то есть в данном случае объекты Person.

Обновление
save()
Для обновления объекта также применяется метод save():

1
2
3
bob = Person.objects.get(id=2)
bob.name = "Bob"
bob.save()
В этом случае Django полностью обновляет объект, все его свойства, даже если мы их не изменяли. Чтобы указать, что нам надо обновить только определенные поля, следует использовать параметр update_fields:

1
2
3
bob = Person.objects.get(id=2)
bob.name = "Bobic"
bob.save(update_fields=["name"])
Это позволит повысить производительность.

update()
Другой способ обновления объектов представляет метод update() в сочетании с методом filter, которые вместе выполняют один запрос к базе данных:

1
Person.objects.filter(id=2).update(name="Mike")
Если нам не надо получать обновляемый объект, то данный способ позволит нам увеличить производительность взаимодействия с бд.

Иногда бывает необходимо изменить значение столбца в бд на основании уже имеющегося значения. В этом случае мы можем использовать функцию F():

1
2
3
from django.db.models import F
 
Person.objects.all(id=2).update(age = F("age") + 1)
В данном случае полю age присваивается уже имеющееся значение, увеличенное на единицу.

При этом важно учитывать, что метод update обновляет все записи в таблице, которые соответствуют условию.

Если надо обновить вообще все записи, вне зависимости от условия, то необходимо комбинировать метод update с методом all():

1
2
3
4
from django.db.models import F
 
Person.objects.all().update(name="Mike")
Person.objects.all().update(age = F("age") + 1)
update_or_create()
Метод update_or_create обновляет запись, а если ее нет, то добавляет ее в таблицу:

1
2
values_for_update={"name":"Bob", "age": 31}
bob, created = Person.objects.update_or_create(id=2, defaults = values_for_update)
Метод update_or_create() принимает два параметра. Первый параметр представляет критерий выборки объектов, которые будут обновляться. Второй параметр представляет объект со значениями, которые будут переданы записям, которые соответствуют китерию из первого параметра. Если критерию не соответствует никаких записей, то в таблицу добавляется новый объект, а переменная created будет равна True.

Удаление
Для удаления мы можем вызвать метод delete() у удаляемого объекта:

1
2
person = Person.objects.get(id=2)
person.delete()
Если не требуется получение отдельного объекта из базы данных, тогда можно удалить объект с помощью комбинации методов filter() и delete():

1
Person.objects.filter(id=4).delete()
Просмотр строки запроса
С помощью свойства query у результата запроса мы можем получить SQL-запрос, который выполнялся. Например:

1
2
people = Person.objects.filter(name="Tom").exclude(age=34)
print(people.query)
Данный код отобразит на консоли SQL-запрос типа следующего:

1
2
SELECT "firstapp_person"."id", "firstapp_person"."name", "firstapp_person"."age"
FROM "firstapp_person" WHERE ("firstapp_person"."name" = Tom AND NOT ("firstapp_person"."age" = 34))




"""