"""
День 5. Неделя 2. 29 октября
Тема: Try except

Ошибка - нарушается синтаксис

Исключение - влзникают в случае, если код написан верно, но есть проблемы с данными, с памятью. с подключением и т.д.

try except (попытайся сделать это, то сделай другое) - конструкция , которая обрабатывает исключения

Операторы:
* Тело finally выполняется всегда, независимо от того, выполнялись ли блоки except в ответ на возникшие исклчения или нет.
* Тело else сработает, если иссключений в try не было, т.е. не было переходов на блоки except.

Начало Практики.47 минут

Пример обычной конструкции try:

try:
    some code 1
except:
    some code2
else:
    some code 3
finally:
    some code 4

try:
    Пробуем определенное действие

except Exception:
    Обрабатываем возможное исключение

except Exception:
    Обрабатываем возможное исключение

else:
    Если в блоке try не возникло исключений

finally:
    срабатывает в любом случае


Список исключений:

*** ZeroDivisionError - деление на ноль.

*** AssertionError - выражение в функции assert ложно.

*** AttributeError - объект не имеет данного атрибута (значения или метода).

*** IndexError - индекс не входит в диапазон элементов.

*** KeyError - несуществующий ключ (в словаре, множестве или другом объекте).

*** NameError - нет такого имени

*** TypeError - тип объекта не подходит для операции

*** ValueError - функция получает аргумент правильного типа, но некорректного значения.


"""

# try:
#     num1 = int(input(' Введите число: '))
# except:
#     print('Вы ввели не число')


"""
Пример использования полной конструкции try except
except -голое исключение, исключение обработано не совсем верно так нам нужно
except можно использовать несколько раз
В этом примере при вводе в num 2 число 0 мы получаем сообщение вы ввели не число
Исправляем его
ZeroDivisionError - деление на ноль
"""

# try:
#     num1 = int(input('Введите первое число: '))
#     num2 = int(input('Введите второе число: '))
#     result = num1/num2 
# except ZeroDivisionError:      
#     print('На ноль делить нельзя')
# except:
#     print('Вы ввели не число!!!')
# else:
#     print(result)
# finally:
#     print('Программа завершена!')


"""
Пример с использованием try except для dictionary 
Здесь мы ввели несколько исключений
Код ниже

Exceptions:
KeyError - несуществующий ключ (в словаре, множестве или другом объекте).
TypeError - операция применена к объекту несоответствующего типа.
"""
# dict_ = dict.fromkeys(('makers','bootcamp','hello','dictionary'),0)
# dict_ =  {key: len(key) for key,val in dict_.items()}
# dict_.update({'except':'Exception'})


# while True:
#     try:
#         key = input('Введите слово: ')
#         if key == 'exit':
#             break
#         dict_[key] +=2
#     except (KeyError,TypeError):
#         print('Данного ключа нет в словаре либо провести конкатенацию нельзя')
#     else:
#         print(dict_[key])
#     finally:
#         print(dict_)



"""
IndexError - индекс не входит в диапазон элементов.
ValueError - функция получает аргумент правильного типа, но некорректного значения.

"""
# list_ = [i for i in range(1,31)]

# try:
#     index = int(input())
#     list_[index] = 'Makers'
# except IndexError:
#     print('You are out of list range')
# except ValueError:
#     print('Please enter the number not a string')
# else:
#     print('There is no exception')
# finally:
#     print(list_)


"""

NameError - не найдено переменной с таким именем.

"""
# try:
#     print(makers)
# except NameError:
#     print('Вы не создавали переменную makers')

"""
raise - вызывает исключения, которое нам нужно.

"""
# number = int(input('Введите число от 1 до 70: '))

# if not number in range(1,71) :
#     raise Exception('Вы ввели число, которое не находится в данном промежутке')
# else:
#     print('Okey')
"""
Конец пратики

"""

"""
AttributeError - объект не имеет данного атрибута (значения или метода).
"""
# a = (1,2,3,4)
# print(a.append(5))

"""
AssertionError - провал проверки assert

assert - оператор проверки выражений

"""
# num = 20
# assert num <10 #AssertionError

"""
ModuleNotFoundError - когда не найдем модуль для импорта

ImportError - модуль найденЮ но не найден объект для импорта

"""
# from maht import sqrt #ModuleNotFoundError

# from math import sinus #ImportError
"""
try except не обрабатывает SyntaxError и другие ошибки, а только исключения

"""
# try:
#     a = [2,3,4,6]
#     for num in a
#         print(num*10)
# except SyntaxError:
#     print('Произошла ошибка')


# a1 = 10
# a2 = '20'
# a3 =0

# try:
#     print(a1+a2)
# except:
#     print('Можно сложить 2 числа или 2 строки')

# try:
#     print(a1 / a2)
#     print(a1 / a3)
# except TypeError:
#     print('Можно делить только')
# except ZeroDivisionError:
#     print('Нельзя делить на 0')

# try:
#     print(a1/a2)
#     print(a2/a3)
# except(TypeError, ZeroDivisionError):
#     print('Произошла ошибка!')

# try:
#     print(a1/a2)
#     print(a2/a3)
# except Exception as exc:
#     print('Произошла ошибка')

# a = {'a':1,'b':2}
# a['c'] #KeyError

# try:
#     value = a['c']
# except KeyError:
#     value =0

# value = 0
# if 'c' in a:
#     valie = a['c']

# value = a.get('c',0)


# a1 = 10
# a2 = 0 

# try:
#     print(a1/a2)
# except ZeroDivisionError:
#     ....

# if a2:
#     print()

# if a1.isdigit():
#     a1 = int(a1)
# if a2.isdigit():
#     a2 = int(a2)


# a = [1,2,3,4,5]
# last_index = len(a) - 1


"""


"""

"""


"""

"""


"""

"""
Classwork
Класнная работа
"""
"""
1) Напишите программу, которая запрашивает ввод двух значений. 
Если хотя бы одно из них не является числом, то должна выполняться конкатенация, т. е. соединение, строк. 
В остальных случаях введенные числа суммируются.
"""



"""
2) Создайте словарь, в котором ключами будут ID, а значениями - пользовательские имена (username). 
Напишите программу, которая запрашивает у вас юзернейм и выдает ID этого юзера. 
Если же данного юзернейма нет, то программа выдает вам исключение, которое содержит следующее сообщение:”Введенного юзера нет в базе данных”. 
Если исключение не выявилось (т.е. Данный юзернейм существует) программа должна приветствовать юзера по юзернейму. 
Также в любом случае программа должна в конце выдавать сообщение: “Спасибо!”
"""
# dict_ = {20342423: 'raychel', 343423423 : 'nik', 42432234555: 'john',3423234: 'snow'}



"""
3) Напишите программу, которая будет запрашивать ваш возраст. 
Если пользователь вводит отрицательное число либо 0, программа должна выдать исключение: “Ваш возраст должен быть больше 0 ”.
"""
# писать код здесь

# age = int(input())
# if age<0:
#     raise ValueError('Ваш возраст должен быть больше 0')

























"""
Task
Таски

"""

"""
3.Напишите программу которая будет получать два числа через input num1, num2, и делить одно на другое. 
Обработайте ошибку, которая возникнет в случае, если второе число окажется 0 и выведите сообщение.

К примеру, таким сообщением:

На ноль делить нельзя 

"""
# try:
#     num1 = int(input())
#     num2 = int(input())
#     result = num1/num2
# except ZeroDivisionError:
#     print('На ноль делить нельзя')
# except:
#     print('Вы ввели не число')
# else:
#     print(result)



"""
4.Напишите программу, которая будет получать через input 2 числа num1, num2 и будет печатать их сумму.
Обработайте ошибку, которая возникнет, если пользователь введёт что-то кроме числа и выведите сообщение, например:
Введите число!

"""
# try:
#     num1 = int(input())
#     num2 = int(input())
#     result = num1+num2
# except :
#     print('Введите число!')
# else:
#     print(result)
"""
5.Создайте словарь, к примеру:

dict_ = {'key1': 'value1', 'key2': 'value2'} 
Попытайтесь получить значение по ключу. Обработайте ошибку, возникающую в том случае, если такого ключа нет, например таким выводом в терминал:

Нет такого ключа! 

"""
# dict_ = {'key1': 'value1', 'key2': 'value2'} 
# key = 'ddd'

# try:
#     dict_[key]
# except KeyError:
#     print('Нет такого ключа!')
# else:
#     print(dict_[key])

"""
6.Создайте список list_ пример:

list_ = [1, 4, 9, 16, 25, 36] 
Обработайте исключение, возникающее при попытке обращения к несуществующему элементу. Примерный вывод в терминал:

Нет такого элемента!

"""
# list_ = [1, 4, 9, 16, 25, 36] 
# try:
#     list_[45]
# except IndexError:
#     print('Нет такого элемента!')

"""
7.В блоке try запросите у пользователя ввод его возраста age = int(input()). 
Затем в том же блоке проверьте его возраст на совершеннолетие. Если пользователь несовершеннолетний(младше 18), 
выбросите исключение ValueError с текстом:

Доступ запрещён 
Обработайте это исключение и другое исключение, которое возникает при вводе текста вместо возраста, выдав сообщение:

Введён некорректный возраст 
Если ошибок не возникло распечатайте сообщение:

Спасибо 
и, наконец, распечатайте сообщение:

До свидания! 

"""

#  # error
# try:
#     age = int(input()) 
#     if age <18:
#         raise ValueError('Доступ запрещён')
# except ValueError:
#     print('Введён некорректный возраст')
# else:
#     print('Спасибо')
# finally:
#     print('До свидания!')




"""
8.В блоке try запросите у пользователя 2 числа num1, num2, затем разделите первое число на второе. 
В блоке except обработайте сразу 2 возможных исключения и распечатайте:

Произошла ошибка! 

"""
# try:
#     num1 = int(input())
#     num2 = int(input())
#     res = num1/num2
# except (ZeroDivisionError,ValueError):
#     print('Произошла ошибка!')
# else:
#     print(res)
    


"""
9.Запросите у пользователя сумму cash которая у него сейчас есть в бумажнике. 
Если он введёт сумму, меньшую чем 0, то выбросите исключение ValueError с текстом:

Сумма не может быть отрицательной! 
иначе распечатайте сумму.

"""

# cash = int(input())
# if cash<0:
#     raise ValueError('Сумма не может быть отрицательной!')
# else:
#     print(cash)

"""
10.Экстра задание 1
Напишите программу, которая запрашивает ввод двух значений inp1, inp2.

Если хотя бы одно из них не является числом, то должна выполняться конкатенация, т. е. соединение, строк.

В остальных случаях введенные числа суммируются.

"""
# try:
#     inp1 = input()
#     inp2 = input()
#     if int(inp1) and int(inp2):
#         print(int(inp1) +int(inp2))
#     else:
#         raise ValueError
# except ValueError:
#     print(inp1+inp2)

"""
11.Запросите у пользователя несколько слов и чисел, поместите их в переменную inp1 введенных через пробел, затем:

поместите эти слова в список

переберите этот список циклом и перевидете все строки в тип данных - число

все числа поместите в отдельный list_

а на возникающие исключение сгенерируйте свое исключение cо строкой:

 Данный элемент не является числом! 

"""
# inp1 = list(input('Введите несколько слов и чисел: '))
# list_ = []
# for elements in inp1:
#     try:
#         list_.append(int(elements))
#     except:
#         print('Данный элемент не является числом! ')
        
# print(list_)
# its'nt right





"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""
"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""
"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""
"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""

"""


"""